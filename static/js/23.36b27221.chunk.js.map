{"version":3,"file":"static/js/23.36b27221.chunk.js","mappings":"kTAGMA,E,MAAMC,GAAAA,OAAa,CACvBC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAI,gBAAiB,CAC1CG,OAAQ,CACNG,MAAAA,KAHyB,cACvBC,EADuB,gBAMVA,EAASC,KAAKC,QANJ,cAMvBD,EANuB,OAO7BE,QAAQC,IAAIH,GAPiB,kBAQtBA,GARsB,2CAAH,sDAWfI,EAAW,mCAAG,sGACFZ,EAAI,uBADF,cACnBO,EADmB,gBAENA,EAASC,KAFH,cAEnBA,EAFmB,yBAIlBA,GAJkB,2CAAH,qDAOXK,EAAW,mCAAG,WAAMC,GAAN,yFACFd,EAAI,SAAD,OAAUc,IADX,cACnBP,EADmB,gBAENA,EAASC,KAFH,cAEnBA,EAFmB,yBAIlBA,GAJkB,2CAAH,sDAOXO,EAAO,mCAAG,WAAMD,GAAN,yFACEd,EAAI,SAAD,OAAUc,EAAV,aADL,cACfP,EADe,gBAEFA,EAASC,KAFP,cAEfA,EAFe,yBAIdA,EAAKQ,MAJS,2CAAH,sDAOPC,EAAU,mCAAG,WAAMH,GAAN,yFACDd,EAAI,SAAD,OAAUc,EAAV,aADF,cAClBP,EADkB,gBAELA,EAASC,KAFJ,cAElBA,EAFkB,yBAIjBA,EAAKC,SAJY,2CAAH,qD,wHCrCR,SAASS,IACtB,IAAQJ,GAAOK,EAAAA,EAAAA,MAAPL,GACR,GAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,YACRN,EAAAA,EAAAA,IAAWH,GACRU,MAAK,SAAAC,GACJH,EAAWG,EACZ,IACAC,OAAM,SAAAC,GAAK,OAAIjB,QAAQC,IAAIgB,EAAhB,GAEf,GAAE,CAACb,KAGF,yBACGO,EAAQO,QACP,wBACGP,EAAQQ,KAAI,SAAAC,GAAE,OACb,2BACE,4DAAWA,EAAGC,OAAd,QACA,uBAAID,EAAGE,YAFAF,EAAGhB,GADC,MAQjB,4KAIP,C","sources":["api/Api.jsx","components/reviews/Reviews.jsx"],"sourcesContent":["\nimport axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '373fb4f004f8944acdbb048696a20af4',\n  },\n});\n\nexport const getSearchMovies = async query => {\n  const response = await API(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  const data = await response.data.results;\n  console.log(data);\n  return data;\n};\n\nexport const getTrending = async () => {\n  const response = await API(`trending/movie/week`);\n  const data = await response.data;\n  // console.log(data);\n  return data;\n};\n\nexport const getOneMovie = async id => {\n  const response = await API(`movie/${id}`);\n  const data = await response.data;\n  // console.log(data);\n  return data;\n};\n\nexport const getCast = async id => {\n  const response = await API(`movie/${id}/credits`);\n  const data = await response.data;\n  // console.log(data);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const response = await API(`movie/${id}/reviews`);\n  const data = await response.data;\n  // console.log(data);\n  return data.results;\n};\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from '../../api/Api';\nimport PropTypes from 'prop-types';\n\nexport default function Reviews() {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    getReviews(id)\n      .then(res => {\n        setReviews(res);\n      })\n      .catch(error => console.log(error));\n\n  }, [id]);\n\n  return (\n    <div>\n      {reviews.length ? (\n        <ul>\n          {reviews.map(el => (\n            <li key={el.id}>\n              <p>Автор: {el.author}.</p>\n              <p>{el.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        \"У нас немає рецензій на цей фільм\"\n      )}\n    </div>\n  );\n}\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n};"],"names":["API","axios","baseURL","params","api_key","getSearchMovies","query","response","data","results","console","log","getTrending","getOneMovie","id","getCast","cast","getReviews","Reviews","useParams","useState","reviews","setReviews","useEffect","then","res","catch","error","length","map","el","author","content"],"sourceRoot":""}