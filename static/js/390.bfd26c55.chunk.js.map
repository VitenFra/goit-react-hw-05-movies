{"version":3,"file":"static/js/390.bfd26c55.chunk.js","mappings":"mTAGMA,E,MAAMC,GAAAA,OAAa,CACvBC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAI,gBAAiB,CAC1CG,OAAQ,CACNG,MAAAA,KAHyB,cACvBC,EADuB,gBAMVA,EAASC,KAAKC,QANJ,cAMvBD,EANuB,OAO7BE,QAAQC,IAAIH,GAPiB,kBAQtBA,GARsB,2CAAH,sDAWfI,EAAW,mCAAG,sGACFZ,EAAI,uBADF,cACnBO,EADmB,gBAENA,EAASC,KAFH,cAEnBA,EAFmB,yBAIlBA,GAJkB,2CAAH,qDAOXK,EAAW,mCAAG,WAAMC,GAAN,yFACFd,EAAI,SAAD,OAAUc,IADX,cACnBP,EADmB,gBAENA,EAASC,KAFH,cAEnBA,EAFmB,yBAIlBA,GAJkB,2CAAH,sDAOXO,EAAO,mCAAG,WAAMD,GAAN,yFACEd,EAAI,SAAD,OAAUc,EAAV,aADL,cACfP,EADe,gBAEFA,EAASC,KAFP,cAEfA,EAFe,yBAIdA,EAAKQ,MAJS,2CAAH,sDAOPC,EAAU,mCAAG,WAAMH,GAAN,yFACDd,EAAI,SAAD,OAAUc,EAAV,aADF,cAClBP,EADkB,gBAELA,EAASC,KAFJ,cAElBA,EAFkB,yBAIjBA,EAAKC,SAJY,2CAAH,qD,kICpCR,SAASS,IACtB,IAAQJ,GAAOK,EAAAA,EAAAA,MAAPL,GACR,GAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOJ,EAAP,KAAaK,EAAb,KAWA,OATAC,EAAAA,EAAAA,YAAU,YACRP,EAAAA,EAAAA,IAAQD,GACLS,MAAK,SAAAC,GACJH,EAAQG,EACT,IACAC,OAAM,SAAAC,GAAK,OAAIhB,QAAQC,IAAIe,EAAhB,GAEf,GAAE,CAACZ,KAGF,yBACGE,EAAKW,QACJ,wBACGX,EAAKY,KAAI,SAAAC,GAAE,OACV,2BACE,gBACEC,IACED,EAAGE,aAAH,0CACuCF,EAAGE,cACtCC,EAENC,IAAG,UAAKJ,EAAGK,SAEb,yBAAIL,EAAGK,KAAP,QACA,8EAAcL,EAAGM,eAVVN,EAAGf,GADF,MAgBd,8LAIP,C","sources":["api/Api.jsx","components/cast/Cast.jsx"],"sourcesContent":["\nimport axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '373fb4f004f8944acdbb048696a20af4',\n  },\n});\n\nexport const getSearchMovies = async query => {\n  const response = await API(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  const data = await response.data.results;\n  console.log(data);\n  return data;\n};\n\nexport const getTrending = async () => {\n  const response = await API(`trending/movie/week`);\n  const data = await response.data;\n  // console.log(data);\n  return data;\n};\n\nexport const getOneMovie = async id => {\n  const response = await API(`movie/${id}`);\n  const data = await response.data;\n  // console.log(data);\n  return data;\n};\n\nexport const getCast = async id => {\n  const response = await API(`movie/${id}/credits`);\n  const data = await response.data;\n  // console.log(data);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const response = await API(`movie/${id}/reviews`);\n  const data = await response.data;\n  // console.log(data);\n  return data.results;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../api/Api';\nimport placeholder from '../../images/posterholder.jpg';\n\nexport default function Cast() {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    getCast(id)\n      .then(res => {\n        setCast(res);\n      })\n      .catch(error => console.log(error));\n    \n  }, [id]);\n\n  return (\n    <div>\n      {cast.length ? (\n        <ul>\n          {cast.map(el => (\n            <li key={el.id}>\n              <img\n                src={\n                  el.profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${el.profile_path}`\n                    : placeholder\n                }\n                alt={`${el.name}`}\n              />\n              <p>{el.name}.</p>\n              <p>Характер: {el.character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        \"У нас немає акторів для цього фільму\"\n      )}\n    </div>\n  );\n}\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};"],"names":["API","axios","baseURL","params","api_key","getSearchMovies","query","response","data","results","console","log","getTrending","getOneMovie","id","getCast","cast","getReviews","Cast","useParams","useState","setCast","useEffect","then","res","catch","error","length","map","el","src","profile_path","placeholder","alt","name","character"],"sourceRoot":""}