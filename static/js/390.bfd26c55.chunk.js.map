{"version":3,"file":"static/js/390.bfd26c55.chunk.js","mappings":"mTAGMA,E,MAAMC,GAAAA,OAAa,CACvBC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAI,gBAAiB,CAC1CG,OAAQ,CACNG,MAAAA,KAHyB,cACvBC,EADuB,gBAMVA,EAASC,KAAKC,QANJ,cAMvBD,EANuB,OAO7BE,QAAQC,IAAIH,GAPiB,kBAQtBA,GARsB,2CAAH,sDAWfI,EAAW,mCAAG,sGACFZ,EAAI,uBADF,cACnBO,EADmB,gBAENA,EAASC,KAFH,cAEnBA,EAFmB,yBAIlBA,GAJkB,2CAAH,qDAOXK,EAAW,mCAAG,WAAMC,GAAN,yFACFd,EAAI,SAAD,OAAUc,IADX,cACnBP,EADmB,gBAENA,EAASC,KAFH,cAEnBA,EAFmB,yBAIlBA,GAJkB,2CAAH,sDAOXO,EAAO,mCAAG,WAAMD,GAAN,yFACEd,EAAI,SAAD,OAAUc,EAAV,aADL,cACfP,EADe,gBAEFA,EAASC,KAFP,cAEfA,EAFe,yBAIdA,EAAKQ,MAJS,2CAAH,sDAOPC,EAAU,mCAAG,WAAMH,GAAN,yFACDd,EAAI,SAAD,OAAUc,EAAV,aADF,cAClBP,EADkB,gBAELA,EAASC,KAFJ,cAElBA,EAFkB,yBAIjBA,EAAKC,SAJY,2CAAH,qD,kICpCR,SAASS,IACtB,IAAQJ,GAAOK,EAAAA,EAAAA,MAAPL,GACR,GAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOJ,EAAP,KAAaK,EAAb,KAWA,OATAC,EAAAA,EAAAA,YAAU,YACRP,EAAAA,EAAAA,IAAQD,GACLS,MAAK,SAAAC,GACJH,EAAQG,EACT,IACAC,OAAM,SAAAC,GAAK,OAAIhB,QAAQC,IAAIe,EAAhB,GAEf,GAAE,CAACZ,KAGF,yBACGE,EAAKW,QACJ,wBACGX,EAAKY,KAAI,SAAAC,GAAE,OACV,2BACE,gBACEC,IACED,EAAGE,aAAH,0CACuCF,EAAGE,cACtCC,EAENC,IAAG,UAAKJ,EAAGK,SAEb,yBAAIL,EAAGK,KAAP,QACA,8EAAcL,EAAGM,eAVVN,EAAGf,GADF,MAgBd,8LAIP,C","sources":["api/Api.jsx","components/cast/Cast.jsx"],"sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nconst API = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3/',\r\n  params: {\r\n    api_key: '373fb4f004f8944acdbb048696a20af4',\r\n  },\r\n});\r\n\r\nexport const getSearchMovies = async query => {\r\n  const response = await API(`/search/movie`, {\r\n    params: {\r\n      query,\r\n    },\r\n  });\r\n  const data = await response.data.results;\r\n  console.log(data);\r\n  return data;\r\n};\r\n\r\nexport const getTrending = async () => {\r\n  const response = await API(`trending/movie/week`);\r\n  const data = await response.data;\r\n  // console.log(data);\r\n  return data;\r\n};\r\n\r\nexport const getOneMovie = async id => {\r\n  const response = await API(`movie/${id}`);\r\n  const data = await response.data;\r\n  // console.log(data);\r\n  return data;\r\n};\r\n\r\nexport const getCast = async id => {\r\n  const response = await API(`movie/${id}/credits`);\r\n  const data = await response.data;\r\n  // console.log(data);\r\n  return data.cast;\r\n};\r\n\r\nexport const getReviews = async id => {\r\n  const response = await API(`movie/${id}/reviews`);\r\n  const data = await response.data;\r\n  // console.log(data);\r\n  return data.results;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getCast } from '../../api/Api';\r\nimport placeholder from '../../images/posterholder.jpg';\r\n\r\nexport default function Cast() {\r\n  const { id } = useParams();\r\n  const [cast, setCast] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getCast(id)\r\n      .then(res => {\r\n        setCast(res);\r\n      })\r\n      .catch(error => console.log(error));\r\n    \r\n  }, [id]);\r\n\r\n  return (\r\n    <div>\r\n      {cast.length ? (\r\n        <ul>\r\n          {cast.map(el => (\r\n            <li key={el.id}>\r\n              <img\r\n                src={\r\n                  el.profile_path\r\n                    ? `https://image.tmdb.org/t/p/w500/${el.profile_path}`\r\n                    : placeholder\r\n                }\r\n                alt={`${el.name}`}\r\n              />\r\n              <p>{el.name}.</p>\r\n              <p>Характер: {el.character}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        \"У нас немає акторів для цього фільму\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nCast.propTypes = {\r\n  cast: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      character: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      profile_path: PropTypes.string,\r\n    }).isRequired\r\n  ).isRequired,\r\n};"],"names":["API","axios","baseURL","params","api_key","getSearchMovies","query","response","data","results","console","log","getTrending","getOneMovie","id","getCast","cast","getReviews","Cast","useParams","useState","setCast","useEffect","then","res","catch","error","length","map","el","src","profile_path","placeholder","alt","name","character"],"sourceRoot":""}